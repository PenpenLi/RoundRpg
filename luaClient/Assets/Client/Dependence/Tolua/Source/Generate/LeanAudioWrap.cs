//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LeanAudioWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LeanAudio), typeof(System.Object));
		L.RegFunction("options", options);
		L.RegFunction("createAudioStream", createAudioStream);
		L.RegFunction("createAudio", createAudio);
		L.RegFunction("generateAudioFromCurve", generateAudioFromCurve);
		L.RegFunction("play", play);
		L.RegFunction("playClipAt", playClipAt);
		L.RegFunction("printOutAudioClip", printOutAudioClip);
		L.RegFunction("New", _CreateLeanAudio);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MIN_FREQEUNCY_PERIOD", get_MIN_FREQEUNCY_PERIOD, set_MIN_FREQEUNCY_PERIOD);
		L.RegVar("PROCESSING_ITERATIONS_MAX", get_PROCESSING_ITERATIONS_MAX, set_PROCESSING_ITERATIONS_MAX);
		L.RegVar("generatedWaveDistances", get_generatedWaveDistances, set_generatedWaveDistances);
		L.RegVar("generatedWaveDistancesCount", get_generatedWaveDistancesCount, set_generatedWaveDistancesCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLeanAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LeanAudio obj = new LeanAudio();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LeanAudio.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int options(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LeanAudioOptions o = LeanAudio.options();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createAudioStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			UnityEngine.AnimationCurve arg1 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			LeanAudioOptions arg2 = (LeanAudioOptions)ToLua.CheckObject(L, 3, typeof(LeanAudioOptions));
			LeanAudioStream o = LeanAudio.createAudioStream(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			UnityEngine.AnimationCurve arg1 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			LeanAudioOptions arg2 = (LeanAudioOptions)ToLua.CheckObject(L, 3, typeof(LeanAudioOptions));
			UnityEngine.AudioClip o = LeanAudio.createAudio(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int generateAudioFromCurve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 1, typeof(UnityEngine.AnimationCurve));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.AudioClip o = LeanAudio.generateAudioFromCurve(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.AudioClip)))
			{
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 1);
				LeanAudio.play(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.AudioClip), typeof(UnityEngine.Vector3)))
			{
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				LeanAudio.play(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.AudioClip), typeof(UnityEngine.Vector3), typeof(float)))
			{
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
				LeanAudio.play(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LeanAudio.play");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int playClipAt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AudioClip));
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.AudioSource o = LeanAudio.playClipAt(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int printOutAudioClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AudioClip));
			UnityEngine.AnimationCurve arg1 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
			LeanAudio.printOutAudioClip(arg0, ref arg1, arg2);
			ToLua.PushObject(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MIN_FREQEUNCY_PERIOD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, LeanAudio.MIN_FREQEUNCY_PERIOD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PROCESSING_ITERATIONS_MAX(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, LeanAudio.PROCESSING_ITERATIONS_MAX);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_generatedWaveDistances(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LeanAudio.generatedWaveDistances);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_generatedWaveDistancesCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, LeanAudio.generatedWaveDistancesCount);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MIN_FREQEUNCY_PERIOD(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LeanAudio.MIN_FREQEUNCY_PERIOD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PROCESSING_ITERATIONS_MAX(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LeanAudio.PROCESSING_ITERATIONS_MAX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_generatedWaveDistances(IntPtr L)
	{
		try
		{
			float[] arg0 = ToLua.CheckNumberArray<float>(L, 2);
			LeanAudio.generatedWaveDistances = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_generatedWaveDistancesCount(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LeanAudio.generatedWaveDistancesCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

