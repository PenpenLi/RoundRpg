//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RandomUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RandomUtil), typeof(System.Object));
		L.RegFunction("SetSeed", SetSeed);
		L.RegFunction("SetSeedOther", SetSeedOther);
		L.RegFunction("OtherRange", OtherRange);
		L.RegFunction("Range", Range);
		L.RegFunction("New", _CreateRandomUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("innerRandom", get_innerRandom, set_innerRandom);
		L.RegVar("otherRandom", get_otherRandom, set_otherRandom);
		L.RegVar("value", get_value, null);
		L.RegVar("otherValue", get_otherValue, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateRandomUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				RandomUtil obj = new RandomUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: RandomUtil.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RandomUtil obj = (RandomUtil)ToLua.CheckObject(L, 1, typeof(RandomUtil));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetSeed(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSeedOther(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			RandomUtil obj = (RandomUtil)ToLua.CheckObject(L, 1, typeof(RandomUtil));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.SetSeedOther(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OtherRange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RandomUtil), typeof(int), typeof(int)))
			{
				RandomUtil obj = (RandomUtil)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.OtherRange(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RandomUtil), typeof(double), typeof(double)))
			{
				RandomUtil obj = (RandomUtil)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				double arg1 = (double)LuaDLL.lua_tonumber(L, 3);
				double o = obj.OtherRange(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RandomUtil.OtherRange");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Range(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RandomUtil), typeof(int), typeof(int)))
			{
				RandomUtil obj = (RandomUtil)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.Range(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RandomUtil), typeof(double), typeof(double)))
			{
				RandomUtil obj = (RandomUtil)ToLua.ToObject(L, 1);
				double arg0 = (double)LuaDLL.lua_tonumber(L, 2);
				double arg1 = (double)LuaDLL.lua_tonumber(L, 3);
				double o = obj.Range(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RandomUtil.Range");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_innerRandom(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			JRandom ret = obj.innerRandom;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index innerRandom on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_otherRandom(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			JRandom ret = obj.otherRandom;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index otherRandom on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			double ret = obj.value;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index value on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_otherValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			double ret = obj.otherValue;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index otherValue on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_innerRandom(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			JRandom arg0 = (JRandom)ToLua.CheckObject(L, 2, typeof(JRandom));
			obj.innerRandom = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index innerRandom on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_otherRandom(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			RandomUtil obj = (RandomUtil)o;
			JRandom arg0 = (JRandom)ToLua.CheckObject(L, 2, typeof(JRandom));
			obj.otherRandom = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index otherRandom on a nil value" : e.Message);
		}
	}
}

