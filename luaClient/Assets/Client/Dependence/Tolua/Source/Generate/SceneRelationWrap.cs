//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SceneRelationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SceneRelation), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PreExchangeWeather", PreExchangeWeather);
		L.RegFunction("StartExchangeColor", StartExchangeColor);
		L.RegFunction("StartExchangeLight", StartExchangeLight);
		L.RegFunction("StartLoadResource", StartLoadResource);
		L.RegFunction("StartUnLoadResource", StartUnLoadResource);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("sceneLight", get_sceneLight, set_sceneLight);
		L.RegVar("playerLight", get_playerLight, set_playerLight);
		L.RegVar("weatherTransform", get_weatherTransform, set_weatherTransform);
		L.RegVar("mainCamera", get_mainCamera, set_mainCamera);
		L.RegVar("bg", get_bg, set_bg);
		L.RegVar("attacks_pos", get_attacks_pos, set_attacks_pos);
		L.RegVar("defences_pos", get_defences_pos, set_defences_pos);
		L.RegVar("SystemArgsExchanges", get_SystemArgsExchanges, set_SystemArgsExchanges);
		L.RegVar("particleExchanges", get_particleExchanges, set_particleExchanges);
		L.RegVar("colorExchanges", get_colorExchanges, set_colorExchanges);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreExchangeWeather(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SceneRelation obj = (SceneRelation)ToLua.CheckObject(L, 1, typeof(SceneRelation));
			obj.PreExchangeWeather();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartExchangeColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			SceneRelation obj = (SceneRelation)ToLua.CheckObject(L, 1, typeof(SceneRelation));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.StartExchangeColor(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartExchangeLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			SceneRelation obj = (SceneRelation)ToLua.CheckObject(L, 1, typeof(SceneRelation));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			obj.StartExchangeLight(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLoadResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneRelation obj = (SceneRelation)ToLua.CheckObject(L, 1, typeof(SceneRelation));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			ParticleExchange o = obj.StartLoadResource(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUnLoadResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SceneRelation obj = (SceneRelation)ToLua.CheckObject(L, 1, typeof(SceneRelation));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			ParticleExchange o = obj.StartUnLoadResource(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sceneLight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Light ret = obj.sceneLight;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneLight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playerLight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Light ret = obj.playerLight;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playerLight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_weatherTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform ret = obj.weatherTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index weatherTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Camera ret = obj.mainCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mainCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.GameObject ret = obj.bg;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bg on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_attacks_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform[] ret = obj.attacks_pos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index attacks_pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defences_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform[] ret = obj.defences_pos;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defences_pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemArgsExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<SystemArgsExchange> ret = obj.SystemArgsExchanges;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SystemArgsExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_particleExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<ParticleExchange> ret = obj.particleExchanges;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colorExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<ColorArgsExchange> ret = obj.colorExchanges;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index colorExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sceneLight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Light arg0 = (UnityEngine.Light)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Light));
			obj.sceneLight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sceneLight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playerLight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Light arg0 = (UnityEngine.Light)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Light));
			obj.playerLight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index playerLight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_weatherTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.weatherTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index weatherTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.mainCamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mainCamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.bg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bg on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_attacks_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.attacks_pos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index attacks_pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defences_pos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.defences_pos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defences_pos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SystemArgsExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<SystemArgsExchange> arg0 = (System.Collections.Generic.List<SystemArgsExchange>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<SystemArgsExchange>));
			obj.SystemArgsExchanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SystemArgsExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_particleExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<ParticleExchange> arg0 = (System.Collections.Generic.List<ParticleExchange>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ParticleExchange>));
			obj.particleExchanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_colorExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SceneRelation obj = (SceneRelation)o;
			System.Collections.Generic.List<ColorArgsExchange> arg0 = (System.Collections.Generic.List<ColorArgsExchange>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ColorArgsExchange>));
			obj.colorExchanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index colorExchanges on a nil value" : e.Message);
		}
	}
}

