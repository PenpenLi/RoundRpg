//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ParticleExchangeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ParticleExchange), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("StartUnloadResource", StartUnloadResource);
		L.RegFunction("StartLoadResource", StartLoadResource);
		L.RegFunction("StartEnterWeatherParticle", StartEnterWeatherParticle);
		L.RegFunction("StartLeaveWeatherParticle", StartLeaveWeatherParticle);
		L.RegFunction("StartExchangeParticleColor", StartExchangeParticleColor);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("uri", get_uri, set_uri);
		L.RegVar("particleObj", get_particleObj, set_particleObj);
		L.RegVar("pas", get_pas, set_pas);
		L.RegVar("particleArgsExchanges", get_particleArgsExchanges, set_particleArgsExchanges);
		L.RegVar("particleColorExchanges", get_particleColorExchanges, set_particleColorExchanges);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUnloadResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ParticleExchange obj = (ParticleExchange)ToLua.CheckObject(L, 1, typeof(ParticleExchange));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.StartUnloadResource(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLoadResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ParticleExchange obj = (ParticleExchange)ToLua.CheckObject(L, 1, typeof(ParticleExchange));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.StartLoadResource(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartEnterWeatherParticle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			ParticleExchange obj = (ParticleExchange)ToLua.CheckObject(L, 1, typeof(ParticleExchange));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			obj.StartEnterWeatherParticle(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLeaveWeatherParticle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			ParticleExchange obj = (ParticleExchange)ToLua.CheckObject(L, 1, typeof(ParticleExchange));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.StartLeaveWeatherParticle(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartExchangeParticleColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			ParticleExchange obj = (ParticleExchange)ToLua.CheckObject(L, 1, typeof(ParticleExchange));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.StartExchangeParticleColor(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			string ret = obj.uri;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uri on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_particleObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			UnityEngine.GameObject ret = obj.particleObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			UnityEngine.ParticleSystem[] ret = obj.pas;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_particleArgsExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			System.Collections.Generic.List<ParticleArgsExchange> ret = obj.particleArgsExchanges;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleArgsExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_particleColorExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			System.Collections.Generic.List<ParticleColorArgsExchange> ret = obj.particleColorExchanges;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleColorExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.uri = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index uri on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_particleObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.particleObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleObj on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			UnityEngine.ParticleSystem[] arg0 = ToLua.CheckObjectArray<UnityEngine.ParticleSystem>(L, 2);
			obj.pas = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_particleArgsExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			System.Collections.Generic.List<ParticleArgsExchange> arg0 = (System.Collections.Generic.List<ParticleArgsExchange>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ParticleArgsExchange>));
			obj.particleArgsExchanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleArgsExchanges on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_particleColorExchanges(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ParticleExchange obj = (ParticleExchange)o;
			System.Collections.Generic.List<ParticleColorArgsExchange> arg0 = (System.Collections.Generic.List<ParticleColorArgsExchange>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<ParticleColorArgsExchange>));
			obj.particleColorExchanges = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index particleColorExchanges on a nil value" : e.Message);
		}
	}
}

