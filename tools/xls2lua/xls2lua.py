#coding=utf-8

import xlrd
import os.path
import time
import os
import shutil
import  sys

SCRIPT_HEAD = "-- this file is generated by program!\n\
-- don't change it manaully.\n\
-- source file: %s\n\
-- created at: \n\
-- copyright@zhouwei\n\
\n\
"

def make_table(dir,filename):
	excel = {}
	excel = {}
	excel["filename"] = (dir+"/"+filename)
	excel["data"] = {}
	excel["meta"] = {}

	print(dir+"/"+filename)
	if filename.startswith("~"):
		return excel, 0, "failed"
	if not os.path.isfile(dir+"/"+filename):
		raise NameError, "%s is	not	a valid	filename" % (dir+"/"+filename)
	# book_xlrd = xlrd.open_workbook(filename,formatting_info=True)
	book_xlrd = xlrd.open_workbook((dir+"/"+filename))


	for sheet in book_xlrd.sheets():
		sheet_name = sheet.name.replace(" ", "_")
		if not sheet_name.startswith("output_") and not sheet_name.startswith("_"):
			continue
		if sheet_name.startswith("output_"):
			sheet_name = sheet_name[7:]
		elif sheet_name == ("_"):
			sheet_name = str(filename).replace(".xlsx", "")
			sheet_name = str(sheet_name).replace(".xls", "")
		elif sheet_name.startswith("_"):
			sheet_name = sheet_name[1:]
		else:
			print ("error format sheet "+sheet_name)
			raise ("error format sheet "+sheet_name)

		print sheet_name+" start-----------------------------------------------sheet_name ";
		excel["data"][sheet_name] = {}
		excel["meta"][sheet_name] = {}


		# 必须大于2行
		if sheet.nrows <= 4:
			raise ("error format sheet")
			return {}, -1, "sheet[" + sheet_name + "]" + " rows must > 2"

		# 解析有效标题
		title = {}
		col_idx = 0
		for col_idx in xrange(sheet.ncols):
			value = sheet.cell_value(2, col_idx)
			vtype = sheet.cell_type(2, col_idx)
			if vtype != 1:
				print ("error format sheet: empty title:"+str(col_idx)+" col")
				break
				#return {}, -1, "title columns[" + str(col_idx) + "] must be string"
			title[col_idx] = str(value).replace(" ", "_")
			title[col_idx] = str(value).replace("*", "e_")
 
		excel["meta"][sheet_name]["title"] = title

		# 类型解析
		type_dict = {}
		col_idx = 0
		for col_idx in xrange(sheet.ncols):
			value = sheet.cell_value(1, col_idx)
			vtype = sheet.cell_type(1, col_idx)

			if value == "":
				print ("error format sheet:empty type:"+str(col_idx)+" col"+" at sheet_name:"+sheet_name )
				break;

			if (value.lower() != "i" \
				and value.lower() != "f" \
				and value.lower() != "s" \
				and value.lower() != "b"\
				and value.lower() != "ai"\
				and value.lower() != "af"\
				and value.lower() != "as"\
				and value.lower() != "ab"\
				and value.lower() != "int"\
				and value.lower() != "float"\
				and value.lower() != "string"\
				and value.lower() != "bool"\
				and value.lower() != "array_int"\
				and value.lower() != "array_float"\
				and value.lower() != "array_string" \
				and value.lower() != "array_bool"):
				print ("error format sheet")
				break
				# return {}, -1, "sheet[" + sheet_name + "]" + \
				# 	" row[" + row_idx + "] column[" + col_idx + \
				# 	"] type must be [i] or [s] or [b] or [ai] or [as] or [ab]"
			type_dict[col_idx] = str(value)

		# if type_dict[0].lower() != "i":
		# 	return {}, -1,"sheet[" + sheet_name + "]" + " first column type must be [i]"

		excel["meta"][sheet_name]["type"] = type_dict

		#索引解析
		i = 0
		excel["meta"][sheet_name]["index_col_0"] = 0
		for col_idx in xrange(sheet.ncols):
			value = sheet.cell_value(4, col_idx)
			vtype = sheet.cell_type(4, col_idx)
			if value == "index":
				excel["meta"][sheet_name]["index_col_"+str(i)] = col_idx
				i = i+1


		row_idx = 5
		# 数据从第6行开始
		if sheet_name  == "hero_animation":
			i = 6

		for row_idx in xrange(5, sheet.nrows):
			row = {}

			col_idx = 0
			for col_idx in xrange(0,min(len(type_dict),len(title))):
				value = sheet.cell_value(row_idx, col_idx)
				vtype = sheet.cell_type(row_idx, col_idx)
				# 本行有数据
				v = None
				if (type_dict[col_idx].lower() == "i" or type_dict[col_idx].lower() == "int") :
					if value == '':
						v = 0
					else:
						v = int(value)
				elif (type_dict[col_idx].lower() == "f" or type_dict[col_idx].lower() == "float") :
					if value == '':
						v = 0
					else:
						v = float(value)
				elif (type_dict[col_idx].lower() == "s" or type_dict[col_idx].lower() == "string"):
					if value == '':
						v = ''
					else:
						v = format_str(value)
				elif (type_dict[col_idx].lower() == "b" or type_dict[col_idx].lower() == "bool") :
					if value == 1:
						v = "true"
					else:
						v = "false"
				elif (type_dict[col_idx].lower() == "ai" or type_dict[col_idx].lower() == "array_int") :
					v = str(value)
				elif (type_dict[col_idx].lower() == "af" or type_dict[col_idx].lower() == "array_float"):
					v = str(value)
				elif (type_dict[col_idx].lower() == "as" or type_dict[col_idx].lower() == "array_string"):
					v = format_str(value)
				elif (type_dict[col_idx].lower() == "ab" or type_dict[col_idx].lower() == "array_bool"):
					v = str(value)

				row[col_idx] = v

			excel["data"][sheet_name][row[0]] = row;
		print sheet_name+" end-----------------------------------------------sheet_name ";

	return excel, 0 , "ok"

def format_str(v):
	# print(""+v)
	# s = (""+v).encode("utf-8")
	# print(s)
	# s = "" + v
	# bytes(num)
	if type(v) == int or type(v) == float :
		v =  bytes(v)
	s = ("%s"%(""+v)).encode("utf-8")
	s = s.replace('\"','\\\"')
	s = s.replace('\'','\\\'')
	# if s[-1] == "]":
	# 	s = "%s "%(s)
	return s

def get_i(v):
	if v is None:
		return 0
	return v

def get_f(v):
	if v is None:
		return 0
	return v

def get_s(v):
	if v is None:
		return ""
	return v

def get_b(v):
	if v is None:
		return "false"
	return v

def get_ai( v ):
	if v is None:
		return "{}"
	#v = str(v).replace("&&",",")
	#v = v.replace(';',',')

	tmp_vec_str = v.split("&&")
	res_str = "{"
	i = 0
	for val in tmp_vec_str:
		if val <> None and val <> "":
			if i <> 0:
				res_str += ","
			res_str = res_str +  str(int(float(val)))
			i+=1
	res_str += "}"

	return res_str

def get_af( v ):
	if v is None:
		return "{}"
	#v = str(v).replace("&&",",")
	#v = v.replace(';',',')

	tmp_vec_str = v.split("&&")
	res_str = "{"
	i = 0
	for val in tmp_vec_str:
		if val <> None and val <> "":
			if i <> 0:
				res_str += ","
			res_str = res_str + val
			i+=1
	res_str += "}"

	return res_str

def get_as( v ):
	if v is None:
		return "{}"


	#v = str(v).replace("&&",",")
	#v = v.replace(';',',')

	tmp_vec_str = v.split("&&")
	res_str = "{"
	i = 0
	for val in tmp_vec_str:
		if i <> 0 :
			res_str += ","
		if i == 0 and  val == '':
			continue
		res_str = res_str + "\"" + val + "\""
		i+=1
	res_str += "}"

	return res_str

def get_ab( v ):
	if v is None:
		return "{}"
	#v = str(v).replace("&&",",")
	#v = v.replace(';',',')

	tmp_vec_str = v.split("&&")
	res_str = "{"
	i = 0
	for val in tmp_vec_str:
		if val <> None and val <> "":
			if i <> 0:
				res_str += ","
			res_str = res_str + val.lower()
			i+=1
	res_str += "}"

	return res_str

def write_to_lua_script(excel, output_path):
	luaName = []
	if not os.path.exists(output_path):
		os.mkdir(output_path)

	for (sheet_name, sheet) in excel["data"].items():
		print ("write_to_lua_script:"+sheet_name )
		title = excel["meta"][sheet_name]["title"]
		type_dict = excel["meta"][sheet_name]["type"]
		index_col_one = excel["meta"][sheet_name]["index_col_0"]

		outfp = open(output_path + "/" + sheet_name + ".lua", 'w')
		create_time = time.strftime("%a %b %d %H:%M:%S %Y", time.gmtime(time.time()))
		outfp.write(SCRIPT_HEAD % (sheet_name))
		outfp.write('''
local data = {}
local class_data = {}
local index_one_data = nil
class_data["data"] = data

function class_data.getDataByID(id)
    return data[id]
end


''')

		index_content = '''

function class_data.getDataByIndexOne(%s)

    if index_one_data == nil then
      class_data.initIndexOneData()
    end

    return index_one_data[%s]
end

function class_data.initIndexOneData()
    index_one_data = {}
    for k,v in pairs(data) do
        if index_one_data[v.%s] == nil then
          index_one_data[v.%s] = {}
        end

        index_one_data[v.%s][v.%s] = v

    end
end
		'''

		if index_col_one > 0 :
			index_content = index_content%(title[index_col_one],title[index_col_one],title[index_col_one],title[index_col_one],title[index_col_one],title[0])
			outfp.write(index_content)
		outfp.write("\n")
		

		for (row_idx, row) in sheet.items():
			if type(row[0]) == int:
				outfp.write("data[" + str(row[0]) + "] = {")
			else:
				outfp.write("data[\"" + str(row[0]) + "\"] = {")

			# outfp.write("data[\"" + str(row[0]) + "\"] = {")

			field_index = 0
			for (col_idx, field)in row.items():
				if field_index > 0:
						outfp.write(", ")
				field_index += 1
				if (type_dict[col_idx] == "i" or type_dict[col_idx] == "int"):
					tmp_str = get_i(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "f" or type_dict[col_idx] == "float"):
					tmp_str = get_f(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "s" or type_dict[col_idx] == "string"):
					tmp_str = get_s(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = \"" + str(tmp_str) + "\"")
				elif (type_dict[col_idx] == "b" or type_dict[col_idx] == "bool"):
					tmp_str = get_b(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "ai" or type_dict[col_idx] == "array_int"):
					tmp_str = get_ai(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "af" or type_dict[col_idx] == "array_float"):
					tmp_str = get_af(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "as" or type_dict[col_idx] == "array_string"):
					tmp_str = get_as(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				elif (type_dict[col_idx] == "ab" or type_dict[col_idx] == "array_bool"):
					tmp_str = get_ab(row[col_idx])
					outfp.write(" " + str(title[col_idx]) + " = " + str(tmp_str))
				else:
					outfp.close()
					sys.exit("error: there is some wrong in type.")

			outfp.write("}\n")

		outfp.write("\nreturn class_data\n")
		outfp.close()
		print("filename:"+sheet_name+" sheet count:"+str(len(sheet.items())))
		luaName.append(sheet_name)

	return luaName


def clearDir(targetDir):
    fileList = os.listdir(targetDir)

    #print(fileList)
    for f in fileList:
        filepath = os.path.join(targetDir,f)
        if os.path.isfile(filepath) and (not f.endswith(".meta")):
            print("remove "+filepath)
            os.remove(filepath)
        elif os.path.isdir(filepath):
            clearDir(filepath)

def coverFiles(sourceDir,  targetDir,removeTree = True):
    #if os.path.exists(targetDir) == True and removeTree:
    #    shutil.rmtree(targetDir,True)
    #    os.mkdir(targetDir)
    if removeTree:
        if os.path.exists(targetDir):
            clearDir(targetDir)
        else:
            os.mkdir(targetDir)

    for file in os.listdir(sourceDir):
        sourceFile = os.path.join(sourceDir,  file)
        targetFile = os.path.join(targetDir,  file)
        #cover the files
        if os.path.isfile(sourceFile):
            #shutil.copy(targetFile,  sourceFile)
            open(targetFile, "wb").write(open(sourceFile, "rb").read())
            print("copy:"+targetFile)


def main():
	# import sys
	# if len(sys.argv) < 3:
	# 	sys.exit('''usage: xls2lua.py excel_name output_path''')
	# filename = sys.argv[1]
	# output_path = sys.argv[2]
	# if not os.path.exists(filename):
	# 	sys.exit("error: "+filename+" is not exists.")
	# t, ret, errstr = make_table(filename)
	# if ret != 0:
	# 	print(filename)
	# 	print "error: " + errstr
	# else:
	# 	print(filename)
	# 	print "res:"
	# 	# print(t)
	# 	print "success!!!"

	reload(sys)
	sys.setdefaultencoding('utf_8')

	if os.path.exists("output/client") == True:
		shutil.rmtree("output/client", True)
	os.mkdir("output/client")

	luaNames = []
	for parent, dirname, filenames in os.walk(os.getcwd() + "/excles/"):
		for filename in filenames:
			if filename.startswith("_"):
				continue
			if (filename.endswith(".xls") or filename.endswith(".xlsx")):
				excledata, ret, errstr = make_table(parent, filename)
				if len(excledata["data"].items()) > 0:
					luaName = write_to_lua_script(excledata, "output/client")
					if luaName is not None:
						luaNames.extend(luaName)
					else:
						print("---------------------------------------------------------------error--:"+filename)

	writeInitLua(luaNames,"output/client")

	sourcePath = os.getcwd() + '/output/client/'

	targetPath = os.getcwd() + '/../../luaClient/Assets/lua/logic/dict'

	coverFiles(sourcePath, targetPath)


def writeInitLua(luaNames,output_path):
	fileContent = ""
	print luaNames
	for i in range(len(luaNames)):
		fileContent+= ("dict_"+str(luaNames[i])+''' = require "logic/dict/%s" \r\n''')%luaNames[i]
	print fileContent


	outfp = open(output_path + "/init.lua", 'w')
	outfp.write(fileContent)
	outfp.close()

if __name__=="__main__":
	main()

